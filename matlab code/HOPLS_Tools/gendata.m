

function [Xcal, Ycal, Xtest,Ytest] = gendata(datamodel,db,Xdim,Ydim)

% datamodel =5;
%     SNR = [25 20 15 12 10 5 0]

% seedn = randn('state');
% seedu = rand('state');

%%  tensor to matrix,  the same X, Y with different noise for training and testing
if datamodel ==1
    %     I=[10 10 10];
    %     k=2;
    I = Xdim;
    J = Ydim;
    
    A = randn(prod(I(2:end)),prod(J(2:end)));
    X = randn(I);
    Y = double(tenmat(X,1))*A;
    
    xnoise = db;
    ynoise = db;
    sigma1 = sqrt((std(X(:))^2)/(10^(xnoise/10)));
    sigma2 = sqrt((std(Y(:))^2)/(10^(ynoise/10)));
    if xnoise>=30
        sigma1 =0;
        sigma2=0;
    end
    Xcal = X + sigma1*randn(I);
    Ycal = reshape(Y,J) + sigma2*randn(J);
    
    
    % test data
    Xtest = cell(50,1);
    Ytest = cell(50,1);
    for i=1:50
        X = randn(I);
        Y = double(tenmat(X,1))*A;
        Xtest{i} = X + sigma1*randn(I);
        Ytest{i} = reshape(Y,J) + sigma2*randn(J);
    end
end


%% % Matlab Code to Test PLS algorithms on synthetic data (Cesar Caiafa, 2010)
% Tensor data X is generated by using PARAFAC or Tucker Model with random
% parameters (normal or uniformly distributed) plus additive Gaussian noise.
% Then output data Y is generated as a random linear transform applied to,
% i.e.  Y=X_(1)*A.
% For testing data we use the same PARAFAC or Tucker tensor used for
% training with a different additive noise.

if datamodel == 2
    I=[];
    % Generate X
    I(1)=10; % Number of samples (1st mode)
    I(2)=10; % 2nd mode size
    I(3)=10; % 3rd mode size
    
    K=3; % Number of dependent variables
    type='norm'; % type of random variables to use for tensor models
    
    % PARAFAC Model
    %     parrank=10; % Parafac-rank
    %     X=RNDPARAFAC(I,parrank,type); % generation of tensor X as PARAFAC with Parafac-rank=10
    %     X2=RNDPARAFAC(I,parrank,type);
    
    % Tucker Model
    r=[3,3,3]; % Tucker-ranks
    X=RNDTUCKER(I,r,type); % generation of tensor X as Tucker with Tucker-rank=r
    
    A=randn(prod(I(2:end)),K); % random linear transform from each slice of X to each row of Y
    Y=double(tenmat(X,1))*A;
    
    xnoise = db;
    ynoise = db;
    sigma1 = sqrt((std(X(:))^2)/(10^(xnoise/10)));
    sigma2 = sqrt((std(Y(:))^2)/(10^(ynoise/10)));
    if xnoise>=30
        sigma1 =0;
        sigma2=0;
    end
    
    Xcal = X + sigma1*randn(I);
    Ycal = Y + sigma2*randn(I(1),K);
    
    Xtest = X + sigma1*randn(I);
    Ytest = Y + sigma2*randn(I(1),K);
end
%% % Matlab Code to Test PLS algorithms on synthetic data (Cesar Caiafa, 2010)
% Tensor data X is generated by using PARAFAC or Tucker Model with random
% parameters (normal or uniformly distributed) plus additive Gaussian noise.
% Then output data Y is generated as a random linear transform applied to,
% i.e.  Y=X_(1)*A.
% For testing data we use the same PARAFAC or Tucker tensor used for
% training with a different additive noise.

if datamodel == 3
    % Generate X
    I=10; % Number of samples (1st mode)
    J1=20; % 2nd mode size
    J2=30; % 3rd mode size
    K=3; % Number of dependent variables
    
    Nlatent=50;
    
    type='norm'; % type of random variables to use for tensor models
    
    % PARAFAC Model
    parrank=10; % Parafac-rank
    X=RNDPARAFAC([I,J1,J2],parrank,type); % generation of tensor X as PARAFAC with Parafac-rank=10
    
    % Tucker Model
    %     r=[5,5,5]; % Tucker-ranks
    %     X=RNDTUCKER([I,J1,J2],r,type); % generation of tensor X as Tucker with Tucker-rank=r
    
    alpha=0.001; %Level of noise introduced in the input data tensor
    
    A=randn(J1*J2,K); % random linear transform from each slice of X to each row of Y
    
    Xtrain=reshape(X,[I,J1*J2])+alpha*randn(I,J1*J2);
    Xtrain=zscore(Xtrain);
    Y=Xtrain*A; % generation of Y
    
    % Training unfolded PLS
    Ytrain=zscore(Y);
    
    % Testing unforlded PLS
    Xnew=reshape(X,[I,J1*J2])+alpha*randn(I,J1*J2);
    Xnew=zscore(Xnew);
    Ynew=Xnew*A; % generation of Y
    Ynew=zscore(Ynew);
    
    Xcal = reshape(Xtrain,I,J1,J2);
    Ycal = Ytrain;
    Xtest = reshape(Xnew,I,J1,J2);
    Ytest = Ynew;
end

%% Generate data according to latent T and P,Q.
if datamodel == 4
    
    I1= Xdim;
    I2= Ydim;
    
    xnoise = db;
    ynoise = db;
    
    lv=5;
    
    T= randn(I1(1),lv);
    
    
    P = randn(prod(I1(2:end)),lv);
    Q = randn(prod(I2(2:end)),lv);
    
    X = T*P';
    Y = T*Q';
    
    
    sigma1 = sqrt((std(X(:))^2)/(10^(xnoise/10)));
    sigma2 = sqrt((std(Y(:))^2)/(10^(ynoise/10)));
    if xnoise>=100
        sigma1 =0;
        sigma2=0;
    end
    
    Xcal = reshape(X,I1) + sigma1*randn(I1);
    Ycal = reshape(Y,I2) + sigma2*randn(I2);
    
    %     Xcal = reshape(awgn(X(:),xnoise,'measured'),I1);
    %     Ycal = reshape(awgn(Y(:),ynoise,'measured'),I2);
    
    
    % test data
    Xtest = cell(50,1);
    Ytest = cell(50,1);
    for i=1:50
        T= randn(I1(1),lv);
        
        X = T*P';
        Y = T*Q';
        
        Xtest{i} = reshape(X,I1) + sigma1*randn(I1);
        Ytest{i} = reshape(Y,I2) + sigma2*randn(I2);
        
        %         Xtest{i} = reshape(awgn(X(:),xnoise,'measured'),I1);
        %         Ytest{i} = reshape(awgn(Y(:),ynoise,'measured'),I2);
    end
end

%%  Both X and Y are tensors
if datamodel ==5
    I=Xdim;
    J=Ydim;
    
    for n=1:length(I)
        A{n} = randn(I(n),J(n))';
    end
    
    %   X = randn(I); X= tensor(X);
    X = tenrand(I);
    Y = ttm(X,A,[2:length(I)]);
    
    xnoise = db;
    ynoise = db;
    
    %     sigma1 = sqrt((norm(X(:),'fro')^2)/(10^(xnoise/10)));
    %     sigma2 = sqrt((norm(Y(:),'fro')^2)/(10^(ynoise/10)));
    %     if xnoise>=100
    %         sigma1 =0;
    %         sigma2=0;
    %     end
    X = double(X);
    Y = double(Y);
    
    Xcal = reshape(awgn(X(:),xnoise,'measured'),I);
    Ycal = reshape(awgn(Y(:),ynoise,'measured'),J);
    
    % test data
    Xtest = cell(50,1);
    Ytest = cell(50,1);
    for i=1:50
        %       X = randn(I); X= tensor(X);
        X = tenrand(I);
        Y = ttm(X,A,[2:length(I)]);
        X = double(X);
        Y = double(Y);
        Xtest{i} = reshape(awgn(X(:),xnoise,'measured'),I);
        Ytest{i} = reshape(awgn(Y(:),ynoise,'measured'),J);
    end
end

%%  Both X and Y are tensors (T, A(n), B(n),G,D)
if datamodel ==6
    type = 'norm';
    r=[5,5,5]; % Tucker-ranks
    
    I=Xdim;
    J=Ydim;
    xnoise = db;
    ynoise = db;
    
    tdx= RNDTUCKER_HOPLS(I,r,type);
    tdy= RNDTUCKER_HOPLS(J,r,type);
    
    T = randn(I(1), r(1));
    X = tdx;  Y=tdy;
    X.U{1} = T;  Y.U{1} = T;
    X = double(full(X));
    Y = double(full(Y));
    
    Xcal = reshape(awgn(X(:),xnoise,'measured'),I);
    Ycal = reshape(awgn(Y(:),ynoise,'measured'),J);
    
    % test data
    numoftest=50;
    Xtest = cell(numoftest,1);
    Ytest = cell(numoftest,1);
    for i=1:numoftest
        T = randn(I(1), r(1));
        X = tdx;  Y=tdy;
        X.U{1} = T;  Y.U{1} = T;
        X = double(full(X));
        Y = double(full(Y));

        
        Xtest{i} = reshape(awgn(X(:),xnoise,'measured'),I);
        Ytest{i} = reshape(awgn(Y(:),ynoise,'measured'),J);
    end
end


